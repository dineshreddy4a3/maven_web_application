def sendSlackNotifications(String buildStatus = 'STARTED') {
  buildStatus = buildStatus ?: 'SUCCESSFUL'

  def colorName = 'RED'
  def colorCode = '#FF0000'
  def subject = "${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'"
  def summary = "${subject} (${env.BUILD_URL})"

  if (buildStatus == 'STARTED') {
    colorCode = '#FFFF00' // Yellow
  } else if (buildStatus == 'SUCCESSFUL') {
    colorCode = '#00FF00' // Green
  } else {
    colorCode = '#FF0000' // Red
  }

  slackSend(color: colorCode, message: summary)
}

node {
  try {
    buildName 'Dev - ${BUILD_NUMBER}'
    buildDescription 'Pipeline Script - scriptedway'

    def mavenHome = tool name: "maven 3.8.5"

    stage('Checkout Code') {
      git branch: 'development',
          credentialsId: 'd0e0d4aa-f49b-4b69-b876-80655a979da6',
          url: 'https://github.com/dineshreddy4a3/maven_web_application.git'
    }

    stage('Build') {
      sh "$mavenHome/bin/mvn clean package"
    }

    stage('SonarQube Report') {
      sh "$mavenHome/bin/mvn sonar:sonar"
    }

    stage('Upload Artifacts to Nexus') {
      sh "$mavenHome/bin/mvn deploy"
    }

    stage('Deploy App into Tomcat') {
      sshagent(['1045ab4b-f2c9-4bfc-803e-e235dc6f6798']) {
        sh "scp -o StrictHostKeyChecking=no target/maven-web-application.war ec2-user@3.22.233.15:/opt/tomcat9/webapps"
      }
    }

    currentBuild.result = 'SUCCESSFUL'
  } catch (e) {
    currentBuild.result = 'FAILED'
    throw e
  } finally {
    sendSlackNotifications(currentBuild.result)
  }
}

